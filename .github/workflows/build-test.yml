name: build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'resources/**'
      - 'templates/**'
      - 'install.sh'
      - 'README.md'
      - 'Makefile'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'resources/**'
      - 'templates/**'
      - 'install.sh'
      - 'README.md'
      - 'Makefile'
      - 'package.json'
      - 'package-lock.json'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-install-unix:
    runs-on: ubuntu-latest
    steps:
      - name: Use install script
        run: curl -LsSf https://raw.githubusercontent.com/bruin-data/bruin/${{ github.sha }}/install.sh | sh -s -- -d
      - name: Run bruin version
        run: bruin version


  test-install-windows:
    runs-on: windows-latest
    steps:
      - name: Use install script
        shell: bash
        run: curl -LsSf https://raw.githubusercontent.com/bruin-data/bruin/${{ github.sha }}/install.sh | sh -s -- -d
      - name: Run bruin version
        shell: bash
        run: /c/Users/runneradmin/.local/bin/bruin.exe version


  build:
    strategy:
      matrix:
        platform: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-embed-python-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-embed-python-
      - run: make test
      - uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true # optional (default = false)
          files: ./coverage.txt ./coverage.out # optional
          flags: unittests # optional
          token: ${{ secrets.CODECOV_TOKEN }} # required
          verbose: true # optional (default = false)
      - run: make duckdb-test
        shell: bash

